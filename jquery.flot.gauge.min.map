{"version":3,"file":"jquery.flot.gauge.min.js","sources":["dest/jquery.flot.gauge.nodebug.js"],"names":["$","getLogger","debugOptions","Logger","col","columns","i","row","Math","floor","toRad","a","PI","drawArc","context","cx","cy","r","w","rd1","rd2","lc","lw","fc","counterClockwise","save","beginPath","arc","lineTo","cos","sin","closePath","lineWidth","strokeStyle","stroke","fillStyle","fill","restore","init","plot","hooks","processOptions","push","options","series","gauges","debug","show","grid","legend","thresholds","threshold","values","sort","b","value","draw","getOptions","gaugeOptions","getData","length","gauge","Gauge","layout","calculateLayout","drawBackground","item","gaugeOptionsi","extend","calculateAutoValues","cellWidth","cellLayout","calculateCellLayout","drawCellBackground","label","drawLable","drawGauge","data","drawThreshold","drawThresholdValues","drawValue","width","max","margin","font","size","getColor","color","calculateAngle","startAngle","endAngle","min","drawArcWithShadow","blur","clip","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","drawThresholdValue","drawText","thresholdLabelMargin","thresholdLabelFontSize","radius","formatter","x","y","id","text","textOptions","span","exists","attr","css","family","background","opacity","placeholder","append","parseInt","height","logger","ctx","getPlaceholder","prototype","canvasWidth","canvasHeight","rows","ceil","hMargin","vMargin","cellHeight","square","cell","cellMargin","labelMargin","labelFontSize","valueMargin","valueFontSize","thresholdWidth","maxRadiusH","dAngle","heightRatioV","outerRadiusV","maxRadiusV","outerRadius","gaugeOuterHeight","c","blank","offsetY","vAlign","borderColor","borderWidth","strokeRect","backgroundColor","fillRect","border","shadow","c1","a2","a1","j","defaults","log","alert","plugins","name","version","jQuery"],"mappings":"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","sourcesContent":["/*!\n * jquery.flot.gauge v1.1.0 *\n *\n * Flot plugin for rendering gauge charts.\n *\n * Copyright (c) 2015 @toyoty99.\n * Licensed under the MIT license.\n */\n\n/**\n * @module flot.gauge\n */\n(function($) {\n\n\n    /**\n     * Gauge class\n     *\n     * @class Gauge\n     */\n    var Gauge = (function() {\n        /**\n         * context of canvas\n         *\n         * @property context\n         * @type Object\n         */\n        var context;\n        /**\n         * placeholder of canvas\n         *\n         * @property placeholder\n         * @type Object\n         */\n        var placeholder;\n        /**\n         * options of plot\n         *\n         * @property options\n         * @type Object\n         */\n        var options;\n        /**\n         * options of gauge\n         *\n         * @property gaugeOptions\n         * @type Object\n         */\n        var gaugeOptions;\n        /**\n         * data series\n         *\n         * @property series\n         * @type Array\n         */\n        var series;\n        /**\n         * logger\n         *\n         * @property logger\n         * @type Object\n         */\n        var logger;\n\n        /**\n         * constructor\n         *\n         * @class Gauge\n         * @constructor\n         * @param  {Object} gaugeOptions gauge options\n         */\n        var Gauge = function(plot, ctx) {\n            context = ctx;\n            placeholder = plot.getPlaceholder();\n            options = plot.getOptions();\n            gaugeOptions = options.series.gauges;\n            series = plot.getData();\n            logger = getLogger(gaugeOptions.debug);\n        }\n\n        /**\n         * calculate layout\n         *\n         * @method calculateLayout\n         * @return the calculated layout properties\n         */\n        Gauge.prototype.calculateLayout = function() {\n            \n            var canvasWidth = placeholder.width();\n            var canvasHeight = placeholder.height();\n            \n            \n\n            // calculate cell size\n            var columns = Math.min(series.length, gaugeOptions.layout.columns);\n            var rows = Math.ceil(series.length / columns);\n            \n            \n\n            var margin = gaugeOptions.layout.margin;\n            var hMargin = gaugeOptions.layout.hMargin;\n            var vMargin = gaugeOptions.layout.vMargin;\n            var cellWidth = (canvasWidth - (margin * 2) - (hMargin * (columns - 1))) / columns;\n            var cellHeight = (canvasHeight - (margin * 2) - (vMargin * (rows - 1))) / rows;\n            if (gaugeOptions.layout.square) {\n                var cell = Math.min(cellWidth, cellHeight);\n                cellWidth = cell;\n                cellHeight = cell;\n            }\n            \n            \n\n            // calculate 'auto' values\n            calculateAutoValues(gaugeOptions, cellWidth);\n\n            // calculate maximum radius\n            var cellMargin = gaugeOptions.cell.margin;\n            var labelMargin = 0;\n            var labelFontSize = 0;\n            if (gaugeOptions.label.show) {\n                labelMargin = gaugeOptions.label.margin;\n                labelFontSize = gaugeOptions.label.font.size;\n            }\n            var valueMargin = 0;\n            var valueFontSize = 0;\n            if (gaugeOptions.value.show) {\n                valueMargin = gaugeOptions.value.margin;\n                valueFontSize = gaugeOptions.value.font.size;\n            }\n            var thresholdWidth = 0;\n            if (gaugeOptions.threshold.show) {\n                thresholdWidth = gaugeOptions.threshold.width;\n            }\n            var thresholdLabelMargin = 0;\n            var thresholdLabelFontSize = 0;\n            if (gaugeOptions.threshold.label.show) {\n                thresholdLabelMargin = gaugeOptions.threshold.label.margin;\n                thresholdLabelFontSize = gaugeOptions.threshold.label.font.size;\n            }\n\n            var maxRadiusH = (cellWidth / 2) - cellMargin - thresholdWidth - (thresholdLabelMargin * 2) - thresholdLabelFontSize;\n\n            var startAngle = gaugeOptions.gauge.startAngle;\n            var endAngle = gaugeOptions.gauge.endAngle;\n            var dAngle = (endAngle - startAngle) / 100;\n            var heightRatioV = -1;\n            for (var a = startAngle; a < endAngle; a += dAngle) {\n                heightRatioV = Math.max(heightRatioV, Math.sin(toRad(a)));\n            }\n            heightRatioV = Math.max(heightRatioV, Math.sin(toRad(endAngle)));\n            var outerRadiusV = (cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize) / (1 + heightRatioV);\n            if (outerRadiusV * heightRatioV < valueMargin + (valueFontSize / 2)) {\n                outerRadiusV = cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize - valueMargin - (valueFontSize / 2);\n            }\n            var maxRadiusV = outerRadiusV - (thresholdLabelMargin * 2) - thresholdLabelFontSize - thresholdWidth;\n\n            var radius = Math.min(maxRadiusH, maxRadiusV);\n            \n\n            var width = gaugeOptions.gauge.width;\n            if (width >= radius) {\n                width = Math.max(3, radius / 3);\n            }\n            \n\n            var outerRadius = (thresholdLabelMargin * 2) + thresholdLabelFontSize + thresholdWidth + radius;\n            var gaugeOuterHeight = Math.max(outerRadius * (1 + heightRatioV), outerRadius + valueMargin + (valueFontSize / 2));\n\n            return {\n                canvasWidth: canvasWidth,\n                canvasHeight: canvasHeight,\n                margin: margin,\n                hMargin: hMargin,\n                vMargin: vMargin,\n                columns: columns,\n                rows: rows,\n                cellWidth: cellWidth,\n                cellHeight: cellHeight,\n                cellMargin: cellMargin,\n                labelMargin: labelMargin,\n                labelFontSize: labelFontSize,\n                valueMargin: valueMargin,\n                valueFontSize: valueFontSize,\n                width: width,\n                radius: radius,\n                thresholdWidth: thresholdWidth,\n                thresholdLabelMargin: thresholdLabelMargin,\n                thresholdLabelFontSize: thresholdLabelFontSize,\n                gaugeOuterHeight: gaugeOuterHeight\n            };\n        }\n\n        /**\n         * calculate the values which are set as 'auto'\n         *\n         * @method calculateAutoValues\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} cellWidth the width of cell\n         */\n        function calculateAutoValues(gaugeOptionsi, cellWidth) {\n            \n            if (gaugeOptionsi.gauge.width === \"auto\") {\n                gaugeOptionsi.gauge.width = Math.max(5, cellWidth / 8);\n            }\n            if (gaugeOptionsi.label.margin === \"auto\") {\n                gaugeOptionsi.label.margin = Math.max(1, cellWidth / 20);\n            }\n            if (gaugeOptionsi.label.font.size === \"auto\") {\n                gaugeOptionsi.label.font.size = Math.max(5, cellWidth / 8);\n            }\n            if (gaugeOptionsi.value.margin === \"auto\") {\n                gaugeOptionsi.value.margin = Math.max(1, cellWidth / 30);\n            }\n            if (gaugeOptionsi.value.font.size === \"auto\") {\n                gaugeOptionsi.value.font.size = Math.max(5, cellWidth / 9);\n            }\n            if (gaugeOptionsi.threshold.width === \"auto\") {\n                gaugeOptionsi.threshold.width = Math.max(3, cellWidth / 100);\n            }\n            if (gaugeOptionsi.threshold.label.margin === \"auto\") {\n                gaugeOptionsi.threshold.label.margin = Math.max(3, cellWidth / 40);\n            }\n            if (gaugeOptionsi.threshold.label.font.size === \"auto\") {\n                gaugeOptionsi.threshold.label.font.size = Math.max(5, cellWidth / 15);\n            }\n            \n        }\n        Gauge.prototype.calculateAutoValues = calculateAutoValues;\n\n        /**\n         * calculate the layout of the cell inside\n         *\n         * @method calculateCellLayout\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} cellWidth the width of cell\n         * @param  {Number} i the index of the series\n         * @return the calculated cell layout properties\n         */\n        Gauge.prototype.calculateCellLayout = function(gaugeOptionsi, layout, i) {\n            \n            // calculate top, left and center\n            var c = col(layout.columns, i);\n            var r = row(layout.columns, i);\n            var x = layout.margin + (layout.cellWidth + layout.hMargin) * c;\n            var y = layout.margin + (layout.cellHeight + layout.vMargin) * r;\n            var cx = x + (layout.cellWidth / 2);\n            var cy = y + layout.cellMargin + (layout.labelMargin * 2) + layout.labelFontSize + layout.thresholdWidth\n                        + layout.thresholdLabelFontSize + (layout.thresholdLabelMargin * 2) + layout.radius;\n            var blank = layout.cellHeight - (layout.cellMargin * 2) - (layout.labelMargin * 2) - layout.labelFontSize - layout.gaugeOuterHeight;\n            var offsetY = 0;\n            if (gaugeOptionsi.cell.vAlign === \"middle\") {\n                offsetY = (blank / 2);\n            } else if (gaugeOptionsi.cell.vAlign === \"bottom\") {\n                offsetY = blank;\n            }\n            cy += offsetY;\n\n            return {\n                col: c,\n                row: r,\n                x: x,\n                y: y,\n                offsetY: offsetY,\n                cellWidth: layout.cellWidth,\n                cellHeight: layout.cellHeight,\n                cellMargin: layout.cellMargin,\n                cx: cx,\n                cy: cy\n            }\n        }\n\n        /**\n         * draw the background of chart\n         *\n         * @method drawBackground\n         * @param  {Object} layout the layout properties\n         */\n        Gauge.prototype.drawBackground = function(layout) {\n            \n            context.save();\n            context.strokeStyle = options.grid.borderColor;\n            context.lineWidth = options.grid.borderWidth;\n            context.strokeRect(0, 0, layout.canvasWidth, layout.canvasHeight);\n            if (options.grid.backgroundColor) {\n                context.fillStyle = options.grid.backgroundColor;\n                context.fillRect(0, 0, layout.canvasWidth, layout.canvasHeight);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the background of cell\n         *\n         * @method drawCellBackground\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} cellLayout the cell layout properties\n         */\n        Gauge.prototype.drawCellBackground = function(gaugeOptionsi, cellLayout) {\n            \n            context.save();\n            if (gaugeOptionsi.cell.border && gaugeOptionsi.cell.border.color && gaugeOptionsi.cell.border.width) {\n                context.strokeStyle = gaugeOptionsi.cell.border.color;\n                context.lineWidth = gaugeOptionsi.cell.border.width;\n                context.strokeRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\n            }\n            if (gaugeOptionsi.cell.background && gaugeOptionsi.cell.background.color) {\n                context.fillStyle = gaugeOptionsi.cell.background.color;\n                context.fillRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the gauge\n         *\n         * @method drawGauge\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {String} label the label of data\n         * @param  {Number} data the value of the gauge\n         */\n        Gauge.prototype.drawGauge = function(gaugeOptionsi, layout, cellLayout, label, data) {\n            \n\n            var blur = gaugeOptionsi.gauge.shadow.show ? gaugeOptionsi.gauge.shadow.blur : 0;\n            \n\n            // draw gauge frame\n            drawArcWithShadow(\n                cellLayout.cx, // center x\n                cellLayout.cy, // center y\n                layout.radius,\n                layout.width,\n                toRad(gaugeOptionsi.gauge.startAngle),\n                toRad(gaugeOptionsi.gauge.endAngle),\n                gaugeOptionsi.gauge.stroke.color,  // line color\n                gaugeOptionsi.gauge.stroke.width,  // line width\n                \"white\",           // fill color\n                blur);\n\n            // draw gauge\n            var c1 = getColor(gaugeOptionsi, data);\n            var a2 = calculateAngle(gaugeOptionsi, layout, data);\n            drawArcWithShadow(\n                cellLayout.cx, // center x\n                cellLayout.cy, // center y\n                layout.radius - 1,\n                layout.width - 2,\n                toRad(gaugeOptionsi.gauge.startAngle),\n                toRad(a2),\n                c1,           // line color\n                1,            // line width\n                c1,           // fill color\n                blur);\n        }\n\n        /**\n         * decide the color of the data from the threshold options\n         *\n         * @method getColor\n         * @private\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Number} data the value of the gauge\n         */\n        function getColor(gaugeOptionsi, data) {\n            var color;\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\n                var threshold = gaugeOptionsi.threshold.values[i];\n                color = threshold.color;\n                if (data <= threshold.value) {\n                    break;\n                }\n            }\n            return color;\n        }\n\n        /**\n         * calculate the angle of the data\n         *\n         * @method calculateAngle\n         * @private\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Number} data the value of the gauge\n         */\n        function calculateAngle(gaugeOptionsi, layout, data) {\n            var a =\n                gaugeOptionsi.gauge.startAngle\n                    + (gaugeOptionsi.gauge.endAngle - gaugeOptionsi.gauge.startAngle)\n                        * ((data - gaugeOptionsi.gauge.min) / (gaugeOptionsi.gauge.max - gaugeOptionsi.gauge.min));\n\n            if (a < gaugeOptionsi.gauge.startAngle) {\n                a = gaugeOptionsi.gauge.startAngle;\n            } else if (a > gaugeOptionsi.gauge.endAngle) {\n                a = gaugeOptionsi.gauge.endAngle;\n            }\n            return a;\n        }\n\n        /**\n         * draw the arc of the threshold\n         *\n         * @method drawThreshold\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         */\n        Gauge.prototype.drawThreshold = function(gaugeOptionsi, layout, cellLayout) {\n            \n            var a1 = gaugeOptionsi.gauge.startAngle;\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\n                var threshold = gaugeOptionsi.threshold.values[i];\n                c1 = threshold.color;\n                a2 = calculateAngle(gaugeOptionsi, layout, threshold.value);\n                drawArc(\n                    context,\n                    cellLayout.cx, // center x\n                    cellLayout.cy, // center y\n                    layout.radius + layout.thresholdWidth,\n                    layout.thresholdWidth - 2,\n                    toRad(a1),\n                    toRad(a2),\n                    c1,           // line color\n                    1,            // line width\n                    c1);          // fill color\n                a1 = a2;\n            }\n        }\n\n        /**\n         * draw an arc with a shadow\n         *\n         * @method drawArcWithShadow\n         * @private\n         * @param  {Number} cx the x position of the center\n         * @param  {Number} cy the y position of the center\n         * @param  {Number} r the radius of an arc\n         * @param  {Number} w the width of an arc\n         * @param  {Number} rd1 the start angle of an arc in radians\n         * @param  {Number} rd2 the end angle of an arc in radians\n         * @param  {String} lc the color of a line\n         * @param  {Number} lw the widht of a line\n         * @param  {String} fc the fill color  of an arc\n         * @param  {Number} blur the shdow blur\n         */\n        function drawArcWithShadow(cx, cy, r, w, rd1, rd2, lc, lw, fc, blur) {\n            if (rd1 === rd2) {\n                return;\n            }\n            context.save();\n\n            drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc);\n\n            if (blur) {\n                drawArc(context, cx, cy, r, w, rd1, rd2);\n                context.clip();\n                context.shadowOffsetX = 0;\n                context.shadowOffsetY = 0;\n                context.shadowBlur = 10;\n                context.shadowColor = \"gray\";\n                drawArc(context, cx, cy, r + 1, w + 2, rd1, rd2, lc, 1);\n            }\n            context.restore();\n        }\n\n        /**\n         * draw the label of the gauge\n         *\n         * @method drawLable\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Object} item the item of the series\n         */\n        Gauge.prototype.drawLable = function(gaugeOptionsi, layout, cellLayout, i, item) {\n            \n            drawText(\n                cellLayout.cx,\n                cellLayout.y + cellLayout.cellMargin + layout.labelMargin + cellLayout.offsetY,\n                \"flotGagueLabel\" + i,\n                gaugeOptionsi.label.formatter ? gaugeOptionsi.label.formatter(item.label, item.data[0][1]) : text,\n                gaugeOptionsi.label);\n        }\n\n        /**\n         * draw the value of the gauge\n         *\n         * @method drawValue\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Object} item the item of the series\n         */\n        Gauge.prototype.drawValue = function(gaugeOptionsi, layout, cellLayout, i, item) {\n            \n            drawText(\n                cellLayout.cx,\n                cellLayout.cy - (gaugeOptionsi.value.font.size / 2),\n                \"flotGagueValue\" + i,\n                gaugeOptionsi.value.formatter ? gaugeOptionsi.value.formatter(item.label, item.data[0][1]) : text,\n                gaugeOptionsi.value);\n        }\n\n        /**\n         * draw the values of the threshold\n         *\n         * @method drawThresholdValues\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         */\n        Gauge.prototype.drawThresholdValues = function(gaugeOptionsi, layout, cellLayout, i) {\n            \n            // min, max\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Min\" + i, gaugeOptionsi.gauge.min, gaugeOptionsi.gauge.startAngle);\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Max\" + i, gaugeOptionsi.gauge.max, gaugeOptionsi.gauge.endAngle);\n            // threshold values\n            for (var j = 0; j < gaugeOptionsi.threshold.values.length; j++) {\n                var threshold = gaugeOptionsi.threshold.values[j];\n                if (threshold.value > gaugeOptionsi.gauge.min && threshold.value < gaugeOptionsi.gauge.max) {\n                    var a = calculateAngle(gaugeOptionsi, layout, threshold.value);\n                    drawThresholdValue(gaugeOptionsi, layout, cellLayout, i + \"_\" + j, threshold.value, a);\n                }\n            }\n        }\n\n        /**\n         * draw the value of the threshold\n         *\n         * @method drawThresholdValue\n         * @param  {Object} gaugeOptionsi the options of the gauge\n         * @param  {Object} layout the layout properties\n         * @param  {Object} cellLayout the cell layout properties\n         * @param  {Number} i the index of the series\n         * @param  {Number} value the value of the threshold\n         * @param  {Number} a the angle of the value drawn\n         */\n        function drawThresholdValue(gaugeOptionsi, layout, cellLayout, i, value, a) {\n            drawText(\n                cellLayout.cx\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\n                        * Math.cos(toRad(a))),\n                cellLayout.cy\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\n                        * Math.sin(toRad(a))),\n                \"flotGagueThresholdValue\" + i,\n                gaugeOptionsi.threshold.label.formatter ? gaugeOptionsi.threshold.label.formatter(value) : value,\n                gaugeOptionsi.threshold.label,\n                a);\n        }\n\n        /**\n         * draw a text\n         *\n         * the textOptions is assumed as follows:\n         *\n         *   textOptions: {\n         *       background: {\n         *           color: null,\n         *           opacity: 0\n         *       },\n         *       font: {\n         *           size: \"auto\"\n         *           family: \"\\\"ＭＳ ゴシック\\\",sans-serif\"\n         *       },\n         *       color: null\n         *   }\n         *\n         * @method drawText\n         * @private\n         * @param  {Number} x the x position of the text drawn (left top)\n         * @param  {Number} y the y position of the text drawn (left top)\n         * @param  {String} id the id of the dom element\n         * @param  {String} text the text drawn\n         * @param  {Object} textOptions the option of the text\n         * @param  {Number} [a] the angle of the value drawn\n         */\n        function drawText(x, y, id, text, textOptions, a) {\n            var span = $(\"#\" + id);\n            var exists = span.length;\n            if (!exists) {\n                span = $(\"<span></span>\")\n                span.attr(\"id\", id);\n                span.css(\"position\", \"absolute\");\n                span.css(\"top\", y + \"px\");\n                if (textOptions.font.size) {\n                    span.css(\"font-size\", textOptions.font.size + \"px\");\n                }\n                if (textOptions.font.family) {\n                    span.css(\"font-family\", textOptions.font.family);\n                }\n                if (textOptions.color) {\n                    span.css(\"color\", textOptions.color);\n                }\n                if (textOptions.background.color) {\n                    span.css(\"background-color\", textOptions.background.color);\n                }\n                if (textOptions.background.opacity) {\n                    span.css(\"opacity\", textOptions.background.opacity);\n                }\n                placeholder.append(span);\n            }\n            span.text(text);\n            // after append, readjust the left position\n            span.css(\"left\", x + \"px\"); // for redraw, resetting the left position is needed here\n            span.css(\"left\", (parseInt(span.css(\"left\")) - (span.width()/ 2)) + \"px\");\n\n            // at last, set angle\n            if (!exists && a) {\n                span.css(\"top\", (parseInt(span.css(\"top\")) - (span.height()/ 2)) + \"px\");\n                span.css(\"transform\", \"rotate(\" + ((180 * a) + 90) + \"deg)\"); // not supported for ie8\n            }\n        }\n\n        return Gauge;\n    })();\n    /**\n     * get a instance of Logger\n     *\n     * @method  getLogger\n     * @for flot.gauge\n     * @private\n     * @param  {Object} debugOptions the options of debug\n     */\n    function getLogger(debugOptions) {\n        return typeof Logger !== \"undefined\" ? new Logger(debugOptions) : null;\n    }\n\n    /**\n     * calculate the index of columns for the specified data\n     *\n     * @method col\n     * @for flot.gauge\n     * @param  {Number} columns the number of columns\n     * @param  {Number} i       the index of the series\n     * @return the index of columns\n     */\n    function col(columns, i) {\n        return i % columns;\n    }\n\n    /**\n     * calculate the index of rows for the specified data\n     *\n     * @method row\n     * @for flot.gauge\n     * @param  {Number} columns the number of rows\n     * @param  {Number} i       the index of the series\n     * @return the index of rows\n     */\n    function row(columns, i) {\n        return Math.floor(i / columns);\n    }\n\n    /**\n     * calculate the angle in radians\n     *\n     * internally, use a number without PI (0 - 2).\n     * so, in this function, multiply PI\n     *\n     * @method toRad\n     * @for flot.gauge\n     * @param  {Number} a the number of angle without PI\n     * @return the angle in radians\n     */\n    function toRad(a) {\n        return a * Math.PI;\n    }\n\n    /**\n     * draw an arc\n     *\n     * @method drawArc\n     * @for flot.gauge\n     * @param  {Object} context the context of canvas\n     * @param  {Number} cx the x position of the center\n     * @param  {Number} cy the y position of the center\n     * @param  {Number} r the radius of an arc\n     * @param  {Number} w the width of an arc\n     * @param  {Number} rd1 the start angle of an arc in radians\n     * @param  {Number} rd2 the end angle of an arc in radians\n     * @param  {String} lc the color of a line\n     * @param  {Number} lw the widht of a line\n     * @param  {String} fc the fill color  of an arc\n     */\n    function drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc) {\n        if (rd1 === rd2) {\n            return;\n        }\n        var counterClockwise = false;\n        context.save();\n        context.beginPath();\n        context.arc(cx, cy, r, rd1, rd2, counterClockwise);\n        context.lineTo(cx + (r - w) * Math.cos(rd2),\n                       cy + (r - w) * Math.sin(rd2));\n        context.arc(cx, cy, r - w, rd2, rd1, !counterClockwise);\n        context.closePath();\n        if (lw) {\n            context.lineWidth = lw;\n        }\n        if (lc) {\n            context.strokeStyle = lc;\n            context.stroke();\n        }\n        if (fc) {\n            context.fillStyle = fc;\n            context.fill();\n        }\n        context.restore();\n    }\n\n    /**\n     * initialize plugin\n     *\n     * @method init\n     * @for flot.gauge\n     * @private\n     * @param  {Object} plot a instance of plot\n     */\n    function init (plot) {\n        // add processOptions hook\n        plot.hooks.processOptions.push(function(plot, options) {\n            var logger = getLogger(options.series.gauges.debug);\n\n            \n            \n\n            // turn 'grid' and 'legend' off\n            if (options.series.gauges.show) {\n                options.grid.show = false;\n                options.legend.show = false;\n            }\n\n            // sort threshold\n            var thresholds = options.series.gauges.threshold.values;\n            \n            thresholds.sort(function(a, b) {\n                if (a.value < b.value) {\n                    return -1;\n                } else if (a.value > b.value) {\n                    return 1;\n                } else {\n                    return 0;\n                }\n            });\n            \n\n            \n        });\n\n        // add draw hook\n        plot.hooks.draw.push(function(plot, context) {\n            var options = plot.getOptions();\n            var gaugeOptions = options.series.gauges;\n\n            var logger = getLogger(gaugeOptions.debug);\n            \n\n            if (!gaugeOptions.show) {\n                return;\n            }\n\n            var series = plot.getData();\n            \n            if (!series || !series.length) {\n                return; // if no series were passed\n            }\n\n            var gauge = new Gauge(plot, context);\n\n            // calculate layout\n            var layout = gauge.calculateLayout();\n            \n            // debug layout\n            if (gaugeOptions.debug.layout) {\n                \n            }\n\n            // draw background\n            gauge.drawBackground(layout)\n\n            // draw cells (label, gauge, value, threshold)\n            for (var i = 0; i < series.length; i++) {\n                var item = series[i];\n                \n                var gaugeOptionsi = $.extend({}, gaugeOptions, item.gauges);\n                if (item.gauges) {\n                    // re-calculate 'auto' values\n                    gauge.calculateAutoValues(gaugeOptionsi, layout.cellWidth);\n                }\n                \n                // calculate cell layout\n                var cellLayout = gauge.calculateCellLayout(gaugeOptionsi, layout, i);\n                \n                // draw cell background\n                gauge.drawCellBackground(gaugeOptionsi, cellLayout)\n                // debug layout\n                if (gaugeOptionsi.debug.layout) {\n                    \n                }\n                // draw label\n                if (gaugeOptionsi.label.show) {\n                    gauge.drawLable(gaugeOptionsi, layout, cellLayout, i, item);\n                }\n                // draw gauge\n                gauge.drawGauge(gaugeOptionsi, layout, cellLayout, item.label, item.data[0][1]);\n                // draw threshold\n                if (gaugeOptionsi.threshold.show) {\n                    gauge.drawThreshold(gaugeOptionsi, layout, cellLayout);\n                }\n                if (gaugeOptionsi.threshold.label.show) {\n                    gauge.drawThresholdValues(gaugeOptionsi, layout, cellLayout, i)\n                }\n                // draw value\n                if (gaugeOptionsi.value.show) {\n                    gauge.drawValue(gaugeOptionsi, layout, cellLayout, i, item);\n                }\n            }\n        });\n    }\n\n    /**\n     * [defaults description]\n     *\n     * @property defaults\n     * @type {Object}\n     */\n    var defaults = {\n        series: {\n            gauges: {\n                debug: {\n                    log: false,\n                    layout: false,\n                    alert: false\n                },\n                show: false,\n                layout: {\n                    margin: 5,\n                    columns: 3,\n                    hMargin: 5,\n                    vMargin: 5,\n                    square: false\n                },\n                cell: {\n                    background: {\n                        color: null\n                    },\n                    border: {\n                        color: \"black\",\n                        width: 1\n                    },\n                    margin: 5,\n                    vAlign: \"middle\" // 'top' or 'middle' or 'bottom'\n                },\n                gauge: {\n                    width: \"auto\", // a specified number, or 'auto'\n                    startAngle: 0.9, // 0 - 2 factor of the radians\n                    endAngle: 2.1, // 0 - 2 factor of the radians\n                    min: 0,\n                    max: 100,\n                    shadow: {\n                        show: true,\n                        blur: 5\n                    },\n                    stroke: {\n                        color: \"lightgray\",\n                        width: 2\n                    }\n                },\n                label: {\n                    show: true,\n                    margin: \"auto\", // a specified number, or 'auto'\n                    background: {\n                        color: null,\n                        opacity: 0\n                    },\n                    font: {\n                        size: \"auto\", // a specified number, or 'auto'\n                        family: \"sans-serif\"\n                    },\n                    color: null,\n                    formatter: function(label, value) {\n                        return label;\n                    }\n                },\n                value: {\n                    show: true,\n                    margin: \"auto\", // a specified number, or 'auto'\n                    background: {\n                        color: null,\n                        opacity: 0\n                    },\n                    font: {\n                        size: \"auto\", // a specified number, or 'auto'\n                        family: \"sans-serif\"\n                    },\n                    color: null,\n                    formatter: function(label, value) {\n                        return parseInt(value);\n                    }\n                },\n                threshold: {\n                    show: true,\n                    width: \"auto\", // a specified number, or 'auto'\n                    label: {\n                        show: true,\n                        margin: \"auto\", // a specified number, or 'auto'\n                        background: {\n                            color: null,\n                            opacity: 0\n                        },\n                        font: {\n                            size: \"auto\", // a specified number, or 'auto'\n                            family: \",sans-serif\"\n                        },\n                        color: null,\n                        formatter: function(value) {\n                            return value;\n                        }\n                    },\n                    values: [\n                        {\n                            value: 50,\n                            color: \"lightgreen\"\n                        }, {\n                            value: 80,\n                            color: \"yellow\"\n                        }, {\n                            value: 100,\n                            color: \"red\"\n                        }\n                    ]\n                }\n            }\n        }\n    };\n\n    // register the gauge plugin\n    $.plot.plugins.push({\n        init: init,\n        options: defaults,\n        name: \"gauge\",\n        version: \"1.1.0\"\n    });\n\n})(jQuery);\n"]}